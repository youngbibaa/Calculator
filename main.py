# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6.QtWidgets import QMessageBox
from PyQt6 import QtCore, QtGui, QtWidgets
import math


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(431, 690)
        icon = QtGui.QIcon.fromTheme(
            "C:\\Users\\bekzh\\Desktop\\calculator\\images\\icon.png"
        )
        MainWindow.setWindowIcon(icon)
        MainWindow.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        MainWindow.setIconSize(QtCore.QSize(24, 24))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btn_equal = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_equal.setGeometry(QtCore.QRect(360, 598, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_equal.setFont(font)
        self.btn_equal.setStyleSheet(
            "color: rgb(255, 255, 255);\n"
            "background-color: rgb(0, 85, 255);\n"
            "border-radius: 5px;\n"
            "border: 1px solid black;;"
        )
        self.btn_equal.setObjectName("btn_equal")
        self.btn_comma = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_comma.setGeometry(QtCore.QRect(290, 598, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_comma.setFont(font)
        self.btn_comma.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_comma.setObjectName("btn_comma")
        self.btn_zero = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_zero.setGeometry(QtCore.QRect(220, 598, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_zero.setFont(font)
        self.btn_zero.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_zero.setObjectName("btn_zero")
        self.btn_plus_minus = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_plus_minus.setGeometry(QtCore.QRect(150, 598, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_plus_minus.setFont(font)
        self.btn_plus_minus.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_plus_minus.setObjectName("btn_plus_minus")
        self.btn_ln = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_ln.setGeometry(QtCore.QRect(80, 598, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_ln.setFont(font)
        self.btn_ln.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_ln.setObjectName("btn_ln")
        self.btn_two = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_two.setGeometry(QtCore.QRect(220, 518, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_two.setFont(font)
        self.btn_two.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_two.setObjectName("btn_two")
        self.btn_one = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_one.setGeometry(QtCore.QRect(150, 518, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_one.setFont(font)
        self.btn_one.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_one.setObjectName("btn_one")
        self.btn_log = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_log.setGeometry(QtCore.QRect(80, 518, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_log.setFont(font)
        self.btn_log.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_log.setObjectName("btn_log")
        self.btn_three = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_three.setGeometry(QtCore.QRect(290, 518, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_three.setFont(font)
        self.btn_three.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_three.setObjectName("btn_three")
        self.btn_five = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_five.setGeometry(QtCore.QRect(220, 438, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_five.setFont(font)
        self.btn_five.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_five.setObjectName("btn_five")
        self.btn_ten_pow_x = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_ten_pow_x.setGeometry(QtCore.QRect(80, 438, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_ten_pow_x.setFont(font)
        self.btn_ten_pow_x.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_ten_pow_x.setObjectName("btn_ten_pow_x")
        self.btn_six = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_six.setGeometry(QtCore.QRect(290, 438, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_six.setFont(font)
        self.btn_six.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_six.setObjectName("btn_six")
        self.btn_four = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_four.setGeometry(QtCore.QRect(150, 438, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_four.setFont(font)
        self.btn_four.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_four.setObjectName("btn_four")
        self.btn_eight = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_eight.setGeometry(QtCore.QRect(220, 358, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_eight.setFont(font)
        self.btn_eight.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_eight.setObjectName("btn_eight")
        self.btn_nine = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_nine.setGeometry(QtCore.QRect(290, 358, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_nine.setFont(font)
        self.btn_nine.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_nine.setObjectName("btn_nine")
        self.btn_x_pow_y = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_x_pow_y.setGeometry(QtCore.QRect(80, 358, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_x_pow_y.setFont(font)
        self.btn_x_pow_y.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_x_pow_y.setObjectName("btn_x_pow_y")
        self.btn_seven = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_seven.setGeometry(QtCore.QRect(150, 358, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_seven.setFont(font)
        self.btn_seven.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_seven.setObjectName("btn_seven")
        self.btn_minus = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_minus.setGeometry(QtCore.QRect(360, 438, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_minus.setFont(font)
        self.btn_minus.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_minus.setObjectName("btn_minus")
        self.btn_plus = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_plus.setGeometry(QtCore.QRect(360, 518, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_plus.setFont(font)
        self.btn_plus.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_plus.setObjectName("btn_plus")
        self.btn_multiply = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_multiply.setGeometry(QtCore.QRect(360, 358, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_multiply.setFont(font)
        self.btn_multiply.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_multiply.setObjectName("btn_multiply")
        self.btn_divide = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_divide.setGeometry(QtCore.QRect(360, 278, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_divide.setFont(font)
        self.btn_divide.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_divide.setObjectName("btn_divide")
        self.btn_square_root = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_square_root.setGeometry(QtCore.QRect(80, 278, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_square_root.setFont(font)
        self.btn_square_root.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_square_root.setObjectName("btn_square_root")
        self.btn_reciprocal_x = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_reciprocal_x.setGeometry(QtCore.QRect(150, 198, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_reciprocal_x.setFont(font)
        self.btn_reciprocal_x.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_reciprocal_x.setObjectName("btn_reciprocal_x")
        self.btn_abs = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_abs.setGeometry(QtCore.QRect(220, 198, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_abs.setFont(font)
        self.btn_abs.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_abs.setObjectName("btn_abs")
        self.btn_exp = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_exp.setGeometry(QtCore.QRect(290, 198, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_exp.setFont(font)
        self.btn_exp.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_exp.setObjectName("btn_exp")
        self.btn_fact = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_fact.setGeometry(QtCore.QRect(290, 278, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_fact.setFont(font)
        self.btn_fact.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_fact.setObjectName("btn_fact")
        self.btn_close_bracket = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_close_bracket.setGeometry(QtCore.QRect(150, 278, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_close_bracket.setFont(font)
        self.btn_close_bracket.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_close_bracket.setObjectName("btn_close_bracket")
        self.btn_open_bracket = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_open_bracket.setGeometry(QtCore.QRect(220, 278, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_open_bracket.setFont(font)
        self.btn_open_bracket.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_open_bracket.setObjectName("btn_open_bracket")
        self.btn_square = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_square.setGeometry(QtCore.QRect(80, 198, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_square.setFont(font)
        self.btn_square.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_square.setObjectName("btn_square")
        self.btn_mod = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_mod.setGeometry(QtCore.QRect(360, 198, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_mod.setFont(font)
        self.btn_mod.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_mod.setObjectName("btn_mod")
        self.btn_logxy = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_logxy.setGeometry(QtCore.QRect(10, 518, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_logxy.setFont(font)
        self.btn_logxy.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_logxy.setObjectName("btn_logxy")
        self.btn_yroot = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_yroot.setGeometry(QtCore.QRect(10, 358, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_yroot.setFont(font)
        self.btn_yroot.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_yroot.setObjectName("btn_yroot")
        self.btn_cube_root = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_cube_root.setGeometry(QtCore.QRect(10, 278, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_cube_root.setFont(font)
        self.btn_cube_root.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_cube_root.setObjectName("btn_cube_root")
        self.btn_e_pow_x = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_e_pow_x.setGeometry(QtCore.QRect(10, 598, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_e_pow_x.setFont(font)
        self.btn_e_pow_x.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_e_pow_x.setObjectName("btn_e_pow_x")
        self.btn_two_pow_x = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_two_pow_x.setGeometry(QtCore.QRect(10, 438, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_two_pow_x.setFont(font)
        self.btn_two_pow_x.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_two_pow_x.setObjectName("btn_two_pow_x")
        self.btn_cube = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_cube.setGeometry(QtCore.QRect(10, 198, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_cube.setFont(font)
        self.btn_cube.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_cube.setObjectName("btn_cube")
        self.btn_ce = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_ce.setGeometry(QtCore.QRect(290, 128, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_ce.setFont(font)
        self.btn_ce.setStyleSheet(
            "background-color: rgb(255, 255, 255);\n"
            "color: rgb(0, 0, 0);\n"
            "border-color: rgb(0, 0, 0);"
        )
        self.btn_ce.setObjectName("btn_ce")
        self.btn_pi = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_pi.setGeometry(QtCore.QRect(150, 128, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_pi.setFont(font)
        self.btn_pi.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_pi.setObjectName("btn_pi")
        self.btn_sin = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_sin.setGeometry(QtCore.QRect(10, 128, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_sin.setFont(font)
        self.btn_sin.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_sin.setObjectName("btn_sin")
        self.btn_e = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_e.setGeometry(QtCore.QRect(220, 128, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_e.setFont(font)
        self.btn_e.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_e.setObjectName("btn_e")
        self.btn_cos = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_cos.setGeometry(QtCore.QRect(80, 128, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_cos.setFont(font)
        self.btn_cos.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 85, 255);\n"
        )
        self.btn_cos.setObjectName("btn_cos")
        self.btn_c = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_c.setGeometry(QtCore.QRect(360, 128, 61, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.btn_c.setFont(font)
        self.btn_c.setStyleSheet(
            "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-color: rgb(0, 0, 0);\n"
            ""
        )
        self.btn_c.setObjectName("btn_c")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 70, 411, 41))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.label.setStyleSheet(
            "\n" "color: rgb(0, 0, 0);\n"
            "background-color: rgb(255, 255, 255);"
        )
        self.label.setText("")
        self.label.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.label.setTextInteractionFlags(
            QtCore.Qt.TextInteractionFlag.NoTextInteraction
        )
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 20, 411, 41))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_2.setFont(font)
        self.label_2.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.label_2.setStyleSheet(
            "color: rgb(0, 0, 0);\n" "background-color: rgb(255, 255, 255);"
        )
        self.label_2.setText("")
        self.label_2.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.label_2.setWordWrap(False)
        self.label_2.setTextInteractionFlags(
            QtCore.Qt.TextInteractionFlag.NoTextInteraction
        )
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.numbers()
        self.operators()
        self.equal()
        self.constants()
        self.comma()
        self.plus_minus()
        self.one_functions()
        self.clean()

        self.operators = {
            "×": lambda x, y: x * y,
            "÷": lambda x, y: x / y if y != 0 else 0,
            "-": lambda x, y: x - y,
            "+": lambda x, y: x + y,
            "x^y": lambda x, y: math.pow(x, y),
            "logxy": lambda x, y: math.log(x, y),
            "exp": lambda x, y: x * 10**y,
            "%": lambda x, y: x % y
        }
        self.equation = {"operand1": None, "operand2": None, "operator": None}

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.btn_equal.setText(_translate("MainWindow", "="))
        self.btn_comma.setText(_translate("MainWindow", ","))
        self.btn_zero.setText(_translate("MainWindow", "0"))
        self.btn_plus_minus.setText(_translate("MainWindow", "±"))
        self.btn_ln.setText(_translate("MainWindow", "ln"))
        self.btn_two.setText(_translate("MainWindow", "2"))
        self.btn_one.setText(_translate("MainWindow", "1"))
        self.btn_log.setText(_translate("MainWindow", "log"))
        self.btn_three.setText(_translate("MainWindow", "3"))
        self.btn_five.setText(_translate("MainWindow", "5"))
        self.btn_ten_pow_x.setText(_translate("MainWindow", "10 ˣ"))
        self.btn_six.setText(_translate("MainWindow", "6"))
        self.btn_four.setText(_translate("MainWindow", "4"))
        self.btn_eight.setText(_translate("MainWindow", "8"))
        self.btn_nine.setText(_translate("MainWindow", "9"))
        self.btn_x_pow_y.setText(_translate("MainWindow", "xʸ"))
        self.btn_seven.setText(_translate("MainWindow", "7"))
        self.btn_minus.setText(_translate("MainWindow", "-"))
        self.btn_plus.setText(_translate("MainWindow", "+"))
        self.btn_multiply.setText(_translate("MainWindow", "×"))
        self.btn_divide.setText(_translate("MainWindow", "÷"))
        self.btn_square_root.setText(_translate("MainWindow", "√х"))
        self.btn_reciprocal_x.setText(_translate("MainWindow", "1/x"))
        self.btn_abs.setText(_translate("MainWindow", "|x|"))
        self.btn_exp.setText(_translate("MainWindow", "exp"))
        self.btn_fact.setText(_translate("MainWindow", "n!"))
        self.btn_close_bracket.setText(_translate("MainWindow", "("))
        self.btn_open_bracket.setText(_translate("MainWindow", ")"))
        self.btn_square.setText(_translate("MainWindow", "x²"))
        self.btn_mod.setText(_translate("MainWindow", "mod"))
        self.btn_logxy.setText(_translate("MainWindow", "logᵧx"))
        self.btn_yroot.setText(_translate("MainWindow", "ʸ√x"))
        self.btn_cube_root.setText(_translate("MainWindow", "∛х"))
        self.btn_e_pow_x.setText(_translate("MainWindow", "e ˣ"))
        self.btn_two_pow_x.setText(_translate("MainWindow", "2 ˣ"))
        self.btn_cube.setText(_translate("MainWindow", "x³"))
        self.btn_ce.setText(_translate("MainWindow", "CE"))
        self.btn_pi.setText(_translate("MainWindow", "π"))
        self.btn_sin.setText(_translate("MainWindow", "sin"))
        self.btn_e.setText(_translate("MainWindow", "e"))
        self.btn_cos.setText(_translate("MainWindow", "cos"))
        self.btn_c.setText(_translate("MainWindow", "C"))

    def numbers(self):
        self.btn_one.clicked.connect(lambda: self.numbers_click(
            self.btn_one.text()))
        self.btn_two.clicked.connect(lambda: self.numbers_click(
            self.btn_two.text()))
        self.btn_three.clicked.connect(
            lambda: self.numbers_click(self.btn_three.text())
        )
        self.btn_four.clicked.connect(lambda: self.numbers_click(
            self.btn_four.text()))
        self.btn_five.clicked.connect(lambda: self.numbers_click(
            self.btn_five.text()))
        self.btn_six.clicked.connect(lambda: self.numbers_click(
            self.btn_six.text()))
        self.btn_seven.clicked.connect(
            lambda: self.numbers_click(self.btn_seven.text())
        )
        self.btn_eight.clicked.connect(
            lambda: self.numbers_click(self.btn_eight.text())
        )
        self.btn_nine.clicked.connect(lambda: self.numbers_click(
            self.btn_nine.text()))
        self.btn_zero.clicked.connect(lambda: self.numbers_click(
            self.btn_zero.text()))

    def operators(self):
        self.btn_plus.clicked.connect(
            lambda: self.operators_click(self.btn_plus.text())
        )
        self.btn_minus.clicked.connect(
            lambda: self.operators_click(self.btn_minus.text())
        )
        self.btn_divide.clicked.connect(
            lambda: self.operators_click(self.btn_divide.text())
        )
        self.btn_multiply.clicked.connect(
            lambda: self.operators_click(self.btn_multiply.text())
        )
        self.btn_mod.clicked.connect(
            lambda: self.operators_click("%")
        )
        self.btn_x_pow_y.clicked.connect(
            lambda: self.operators_click("x^y")
        )
        self.btn_logxy.clicked.connect(
            lambda: self.operators_click("logxy")
        )
        self.btn_exp.clicked.connect(
            lambda: self.operators_click("exp")
        )

    def comma(self):
        self.btn_comma.clicked.connect(lambda: self.comma_click("."))

    def plus_minus(self):
        self.btn_plus_minus.clicked.connect(lambda: self.plus_minus_click())

    def equal(self):
        self.btn_equal.clicked.connect(lambda: self.equal_click())

    def constants(self):
        self.btn_e.clicked.connect(lambda: self.constants_click(math.e))
        self.btn_pi.clicked.connect(lambda: self.constants_click(math.pi))

    def clean(self):
        self.btn_c.clicked.connect(lambda: self.clean_click("c"))
        self.btn_ce.clicked.connect(lambda: self.clean_click("ce"))

    def one_functions(self):
        self.btn_cube.clicked.connect(lambda: self.one_functions_click("³"))
        self.btn_square.clicked.connect(lambda: self.one_functions_click("²"))
        self.btn_reciprocal_x.clicked.connect(lambda: self.one_functions_click("1/x"))
        self.btn_abs.clicked.connect(lambda: self.one_functions_click("abs"))
        self.btn_fact.clicked.connect(lambda: self.one_functions_click("!"))
        self.btn_cube_root.clicked.connect(lambda: self.one_functions_click("∛"))
        self.btn_square_root.clicked.connect(lambda: self.one_functions_click("√"))
        self.btn_two_pow_x.clicked.connect(lambda: self.one_functions_click("2ˣ"))
        self.btn_ten_pow_x.clicked.connect(lambda: self.one_functions_click("10ˣ"))
        self.btn_e_pow_x.clicked.connect(lambda: self.one_functions_click("eˣ"))
        self.btn_sin.clicked.connect(lambda: self.one_functions_click("sin"))
        self.btn_cos.clicked.connect(lambda: self.one_functions_click("cos"))
        self.btn_log.clicked.connect(lambda: self.one_functions_click("log"))
        self.btn_ln.clicked.connect(lambda: self.one_functions_click("ln"))

    def numbers_click(self, number: float):
        if number == "0" and self.label.text() != "0":
            self.label.setText(self.label.text() + "0")
        elif int(number) >= 1 and int(number) <= 9 and self.label.text() == "0":
            self.label.setText(number)
        else:
            self.label.setText(self.label.text() + number)

    def plus_minus_click(self):
        if "-" in self.label.text():
            new_text = self.label.text().replace("-", " ")
            self.label.setText(new_text)
        elif len(self.label.text()) > 0:
            self.label.setText("-" + self.label.text())

    def operators_click(self, operator: str):
        self.equation["operand1"] = float(self.label.text())
        if operator == "x^y":
            self.label_2.setText(str(self.equation["operand1"]) + "^")
            self.label.setText("")
            self.btn_comma.setEnabled(True)
            self.equation["operator"] = operator
        elif operator == "logxy":
            self.label_2.setText(str(self.equation["operand1"]) + " " + "log base" + " ")
            self.label.setText("")
            self.btn_comma.setEnabled(True)
            self.equation["operator"] = operator
        elif operator == "exp":
            self.label_2.setText(str(self.equation["operand1"]) + "," + "e+")
            self.label.setText("")
            self.btn_comma.setEnabled(True)
            self.equation["operator"] = operator
        elif self.equation.get("operand1") is not None:
            self.equation["operator"] = operator
            self.label_2.setText(self.label.text() + " " + operator + " ")
            self.label.setText("")
            self.btn_comma.setEnabled(True)

    def constants_click(self, const: float):
        self.label.setText(str(const))
        if self.equation.get("operand1") is None:
            self.equation["operand1"] = const
        else:
            self.equation["operand2"] = const

    def clean_click(self, type: str):
        if type == "ce":
            self.label.setText("")
        elif type == "c":
            self.equation = {"operand1": None, "operand2": None, "operator": None}
            self.label.setText("")
            self.label_2.setText("")

    def one_functions_click(self, function: str):
        self.equation["operand1"] = self.label.text()
        if len(self.label.text()) > 0:
            if function == "³":
                answer = math.pow(float(self.label.text()), 3)
                answer_str = (
                    "{:.2f}".format(answer).rstrip("0").rstrip(".")
                    if answer.is_integer()
                    else "{:.2f}".format(answer)
                )
                self.label.setText(answer_str)
                self.label_2.setText(self.equation["operand1"] + "³" + "=")
            elif function == "²":
                answer = math.pow(float(self.label.text()), 2)
                answer_str = (
                    "{:.2f}".format(answer).rstrip("0").rstrip(".")
                    if answer.is_integer()
                    else "{:.2f}".format(answer)
                )
                self.label.setText(answer_str)
                self.label_2.setText(self.equation["operand1"] + "²" + "=")
            elif function == "1/x":
                try:
                    answer = 1 / float(self.label.text())
                    self.label.setText(str(answer))
                    self.label_2.setText("1 / " + self.equation["operand1"] + "=")
                except ZeroDivisionError:
                    self.show_message('Деление на ноль!')
                    self.label.setText("0")
            elif function == "abs":
                answer = abs(float(self.label.text()))
                self.label.setText(str(answer))
                self.label_2.setText("|" + self.equation["operand1"] + "|" + "=")
            elif function == "!":
                try:
                    answer = math.factorial(int(self.label.text()))
                    self.label.setText(str(answer))
                    self.label_2.setText(self.equation["operand1"] + "!" + "=")
                except ValueError:
                    self.show_message('Число должно быть целое!')
                    self.label.setText("0")
                except OverflowError:
                    self.label.setText("0")
                    self.show_message("Число огромное!")
            elif function == "∛":
                answer = math.pow((float(self.label.text())), 1 / 3)
                self.label.setText(str(answer))
                self.label_2.setText("∛" + self.equation["operand1"] + "=")
            elif function == "√":
                answer = math.sqrt((float(self.label.text())))
                self.label.setText(str(answer))
                self.label_2.setText("√" + self.equation["operand1"] + "=")
            elif function == "2ˣ":
                try:
                    answer = math.pow(2, (float(self.label.text())))
                    self.label.setText(str(answer))
                    self.label_2.setText("2^" + self.equation["operand1"] + "=")
                except OverflowError:
                    self.label.setText("0")
                    self.show_message("Число огромное!")
            elif function == "10ˣ":
                try:
                    answer = math.pow(10, (float(self.label.text())))
                    self.label.setText(str(answer))
                    self.label_2.setText("10^" + self.equation["operand1"] + "=")
                except OverflowError:
                    self.label.setText("0")
                    self.show_message("Число огромное!")
            elif function == "eˣ":
                try:
                    answer = math.pow(math.e, (float(self.label.text())))
                    self.label.setText(str(answer))
                    self.label_2.setText("e^" + self.equation["operand1"] + "=")
                except OverflowError:
                    self.label.setText("0")
                    self.show_message("Число огромное!")
            elif function == "sin":
                answer = (
                    "{:.2f}".format(
                        math.sin((float(self.label.text())))
                    )
                    .rstrip("0")
                    .rstrip(".")
                )
                self.label.setText(str(answer))
                self.label_2.setText(f"sin({self.equation['operand1']})" + "=")
            elif function == "cos":
                answer = (
                    "{:.2f}".format(
                        math.cos((float(self.label.text())))
                    )
                    .rstrip("0")
                    .rstrip(".")
                )
                self.label.setText(str(answer))
                self.label_2.setText(f"cos({self.equation['operand1']})" + "=")
            elif function == "log":
                answer = math.log10((float(self.label.text())))
                self.label.setText(str(answer))
                self.label_2.setText(f"log({self.equation['operand1']})" + "=")
            elif function == "ln":
                answer = math.log((float(self.label.text())))
                self.label.setText(str(answer))
                self.label_2.setText(f"ln({self.equation['operand1']})" + "=")

    def comma_click(self, comma: str):
        if len(self.equation) == 0:
            self.btn_comma.setEnabled(True)
        elif not self.label.text():
            self.label.setText("0" + comma)
        elif comma not in self.label.text():
            self.label.setText(self.label.text() + comma)
        self.btn_comma.setEnabled(False)

    def equal_click(self):
        if self.equation.get("operator") is not None:
            self.equation["operand2"] = float(self.label.text())
            self.label_2.setText(self.label_2.text() + self.label.text())
            self.label.setText("")
            operator = self.equation.get("operator")
            if operator in self.operators:
                answer = self.operators[operator](self.equation["operand1"], self.equation["operand2"])
                answer_formatted = "{:.2f}".format(answer).rstrip("0").rstrip(".")
                self.label_2.setText(self.label_2.text() + "=")
                self.label.setText(str(answer_formatted))
            self.equation = {"operand1": None, "operand2": None, "operator": None}

    def show_message(self, message: str):
        msg = QMessageBox()
        msg.setWindowTitle("Ошибка!")
        msg.setText(message)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
